- name: Install All Applications on RDSH
  hosts: all
  gather_facts: true
  collections:
    - community.windows
    - chocolatey.chocolatey
    - ansible.windows
    - microsoft.ad
  tasks:
  - name: Check if Chocolatey is already installed
    win_shell: (Get-Command choco).Path
    register: get_command_choco

  - name: Install chocolatey
    win_shell: | 
      Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    when: not get_command_choco.stderr == ""
    
  - name: Reboot
    win_reboot:
    when: not get_command_choco.stderr == ""

  - name: join host with automatic reboot
    microsoft.ad.membership:
      dns_domain_name: '{{ domain }}'
      domain_admin_user: '{{ domainuser }}'
      domain_admin_password: '{{ domainpassword }}'
      domain_ou_path: '{{ domainou }}'
      state: domain
      reboot: true
    tags:
    - domain

  - name: Install Chrome
    win_chocolatey:
      name: googlechrome
      state: present

  - name: Install 7 Zip
    win_chocolatey:
      name: 7zip
      state: present

  - name: Install Adobe Reader
    win_chocolatey:
      name: adobereader
      state: present

  - name: Install Greenshot
    win_chocolatey:
      name: greenshot
      state: present

  - name: Install FSlogix
    win_chocolatey:
      name: fslogix
      state: present

  - name: Install FSlogix-Rule
    win_chocolatey:
      name: fslogix-rule
      state: present

  - name: Install OneDrive
    win_chocolatey:
      name: onedrive
      state: present
      ignore_checksums: True

  - name: Install Microsoft Teams
    win_chocolatey:
      name: microsoft-teams
      state: present

  - name: Install Firefox
    win_chocolatey:
      name: firefox
      state: present

  - name: Install WinSCP
    win_chocolatey:
      name: winscp
      state: present

  - name: Install NinjaRMM
    ansible.windows.win_package:
      path: '{{ domaindeploypath }}\DRKNinjaTerraCloud.msi' 
      product_id: 'NinjaOne RMM'
      arguments: /quiet
      state: present

  - name: Install Sophos Server Protection
    ansible.windows.win_package:
      path: '{{ domaindeploypath }}\SophosSetupServer.exe' 
      product_id: 'Sophos Server Protection'
      arguments: --quiet
      state: present

  - name: Add Domain Group to FSlogix ODFC
    ansible.windows.win_group_membership:
      name: FSLogix ODFC Include List
      members:
        - DRKHG\FSLogix-Access
      state: pure

  - name: Add Domain Group to FSlogix Profiles
    ansible.windows.win_group_membership:
      name: FSLogix Profile Include List
      members:
        - DRKHG\FSLogix-Access
      state: pure

  - name: Copy App Rules
    community.windows.win_robocopy:
      src: '{{ fslogixapprulesrc }}'
      dest: '{{ fslogixappruledst }}'

  - name: Create Autostart FSLogix Tray for all Users
    community.windows.win_shortcut:
      src: '{{ fslogixtraysrc }}'
      dest: '{{ autostartfolder }}\FSLogix Tray.lnk'
      icon: '{{ fslogixtraysrc }},0'

  - name: Install RDSH with sub features and management tools
    ansible.windows.win_feature:
      name: RDS-RD-Server
      state: present
      include_sub_features: true
      include_management_tools: true
    register: win_feature

  - name: Reboot if installing RDSH feature requires it
    ansible.windows.win_reboot:
    when: win_feature.reboot_required

  - name: Add Server to RDS Deployment
    ansible.windows.win_powershell:
      script: | 
        Add-RDServer -Server '{{ ansible_fqdn }}' -Role "RDS-RD-SERVER" -ConnectionBroker '{{ rdsconnectionbroker }}'

  - name: Add Server to RDS Collection
    ansible.windows.win_powershell:
      script: | 
        Add-RDSessionHost -SessionHost '{{ ansible_fqdn }}' -ConnectionBroker '{{ rdsconnectionbroker }}' -CollectionName '{{ rdscollectionname }}'

  - name: Disable new Connections
    ansible.windows.win_powershell:
      script: | 
        Set-RDSessionHost -SessionHost '{{ ansible_fqdn }}' -NewConnectionAllowed No -ConnectionBroker '{{ rdsconnectionbroker }}'

#  - name: Install all updates and reboot as many times as needed
#    ansible.windows.win_updates:
#      category_names: '*'
#      reboot: false